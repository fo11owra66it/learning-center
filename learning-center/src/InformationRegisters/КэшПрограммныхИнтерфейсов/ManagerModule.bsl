///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает данные кэша версий из ресурса типа ХранилищеЗначения регистра КэшПрограммныхИнтерфейсов.
//
// Параметры:
//   Идентификатор - Строка - идентификатор записи кэша.
//   ТипДанных     - ПеречислениеСсылка.ТипыДанныхКэшаПрограммныхИнтерфейсов
//   ПараметрыПолучения - Строка - массив параметров сериализованный в XML для передачи в метод обновления кэша.
//   ИспользоватьУстаревшиеДанные - Булево - флаг определяющий необходимость ожидания обновления
//      данных в кэше перед возвратом значения, в случае обнаружения факта их устаревания.
//      Истина - всегда использовать данные из кэша, если они там есть. Ложь - ожидать
//      обновления данных кэша, в случае обнаружения факта устаревания данных.
//   ЭтоЗащищенноеСоединениеПоУмолчанию - Булево, Неопределено
//
// Возвращаемое значение:
//   ФиксированныйМассив, ДвоичныеДанные
//
Функция ДанныеКэшаВерсий(Знач Идентификатор, Знач ТипДанных, Знач ПараметрыПолучения,
			Знач ИспользоватьУстаревшиеДанные = Истина, Знач ЭтоЗащищенноеСоединениеПоУмолчанию = Неопределено) Экспорт
	
	Выборка = ТекущиеДанныеКэшаВерсий(Идентификатор, ТипДанных);
	
	ТребуетсяВыполнитьОбновление = Ложь;
	ТребуютсяОбновленныеДанные = Ложь;
	
	Если Выборка = Неопределено Тогда
		ТребуетсяВыполнитьОбновление = Истина;
		ТребуютсяОбновленныеДанные = Истина;
		
	ИначеЕсли Не КэшПрограммногоИнтерфейсаАктуален(Выборка.ДатаОбновления) Тогда
		ТребуетсяВыполнитьОбновление = Истина;
		ТребуютсяОбновленныеДанные = Не ИспользоватьУстаревшиеДанные;
	КонецЕсли;
	
	Если Не ТребуетсяВыполнитьОбновление Тогда
		Возврат Выборка.Данные.Получить();
	КонецЕсли;
	
	ОбновлениеВТекущемСеансе = ТребуютсяОбновленныеДанные
		Или ОбщегоНазначения.ИнформационнаяБазаФайловая()
		Или МонопольныйРежим()
		Или ОбщегоНазначения.РежимОтладки()
		Или ТекущийРежимЗапуска() = Неопределено
		Или ЭтоЗащищенноеСоединениеПоУмолчанию = Ложь;
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("Идентификатор", Идентификатор);
	ПараметрыОбновления.Вставить("ТипДанных", ТипДанных);
	ПараметрыОбновления.Вставить("ПараметрыПолучения", ПараметрыПолучения);
	
	Если ОбновлениеВТекущемСеансе Тогда
		ОбновитьДанныеКэшаВерсий(ПараметрыОбновления, Выборка);
	Иначе
		Если ПараметрыПолучения.Количество() > 4 И ПараметрыПолучения[4] <> Неопределено Тогда
			ПараметрыОбновления.ПараметрыПолучения = Новый Массив(Новый ФиксированныйМассив(ПараметрыПолучения));
			ПараметрыОбновления.ПараметрыПолучения[4] = Null;
		КонецЕсли;
		ИмяПроцедуры = "РегистрыСведений.КэшПрограммныхИнтерфейсов.ОбновитьДанныеКэшаВерсий";
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление кэша версий. Идентификатор записи %1. Тип данных %2.'"),
			Идентификатор, ТипДанных);
		
		ОтборЗаданий = Новый Структура;
		ОтборЗаданий.Вставить("ИмяМетода",    ИмяПроцедуры);
		ОтборЗаданий.Вставить("Наименование", НаименованиеЗадания);
		ОтборЗаданий.Вставить("Состояние",    СостояниеФоновогоЗадания.Активно);
		
		Если ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий).Количество() = 0 Тогда
			ПараметрыОперации = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
			ПараметрыОперации.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			ПараметрыОперации.ЗапуститьВФоне = Истина;
			ПараметрыОперации.ОжидатьЗавершение = 0;
			
			ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОбновления, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Выборка.Данные.Получить();
	
КонецФункции

// Для функции ДанныеКэшаВерсий и процедуры ОбновитьДанныеКэшаВерсий.
Функция ТекущиеДанныеКэшаВерсий(Идентификатор, ТипДанных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКэша.ДатаОбновления КАК ДатаОбновления,
	|	ТаблицаКэша.Данные КАК Данные,
	|	ТаблицаКэша.ТипДанных КАК ТипДанных
	|ИЗ
	|	РегистрСведений.КэшПрограммныхИнтерфейсов КАК ТаблицаКэша
	|ГДЕ
	|	ТаблицаКэша.Идентификатор = &Идентификатор
	|	И ТаблицаКэша.ТипДанных = &ТипДанных";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обновляет данные в кэше версий.
//
// Параметры:
//  ПараметрыОбновления - Структура:
//   * Идентификатор      - Строка - идентификатор записи кэша.
//   * ТипДанных          - ПеречислениеСсылка.ТипыДанныхКэшаПрограммныхИнтерфейсов - тип обновляемых данных.
//   * ПараметрыПолучения - Массив - дополнительные параметры получения данных в кэш.
//  АдресХранилища        - Строка - не используется
//                        - Неопределено, ВыборкаИзРезультатаЗапроса - возвращаемое значение.
//
Процедура ОбновитьДанныеКэшаВерсий(ПараметрыОбновления, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Идентификатор      = ПараметрыОбновления.Идентификатор;
	ТипДанных          = ПараметрыОбновления.ТипДанных;
	ПараметрыПолучения = ПараметрыОбновления.ПараметрыПолучения;
	
	Если ПараметрыПолучения.Количество() > 4 И ПараметрыПолучения[4] = Null Тогда
		ПараметрыПолучения[4] = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	Если ТипЗнч(АдресХранилища) = Тип("Строка") Тогда
		Выборка = ТекущиеДанныеКэшаВерсий(Идентификатор, ТипДанных);
		Если Выборка <> Неопределено
		   И КэшПрограммногоИнтерфейсаАктуален(Выборка.ДатаОбновления) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Идентификатор = Идентификатор;
	НоваяЗапись.ТипДанных = ТипДанных;
	НоваяЗапись.ДатаОбновления = ТекущаяУниверсальнаяДата();
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПараметрыПолучения", ПараметрыПолучения);
	НаборЗаписей.ПодготовитьДанныеДляЗаписи(НоваяЗапись.Данные);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
	ЭлементБлокировки.УстановитьЗначение("ТипДанных", ТипДанных);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Выборка = ТекущиеДанныеКэшаВерсий(Идентификатор, ТипДанных);
		
		Если Выборка = Неопределено
		 Или Не КэшПрограммногоИнтерфейсаАктуален(Выборка.ДатаОбновления) Тогда
			
			НаборЗаписей.Записать();
			Если ТипЗнч(АдресХранилища) <> Тип("Строка") Тогда
				АдресХранилища = НоваяЗапись;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Подготавливает данные для кэша программных интерфейсов.
//
// Параметры:
//  ТипДанных          - ПеречислениеСсылка.ТипыДанныхКэшаПрограммныхИнтерфейсов - тип обновляемых данных.
//  ПараметрыПолучения - Массив - дополнительные параметры получения данных в кэш.
//  
// Возвращаемое значение:
//  ФиксированныйМассив, ДвоичныеДанные
//
Функция ПодготовитьДанныеКэшаВерсий(Знач ТипДанных, Знач ПараметрыПолучения) Экспорт
	
	Если ТипДанных = Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ВерсииИнтерфейса Тогда
		Данные = ПолучитьВерсииИнтерфейсаВКэш(ПараметрыПолучения[0], ПараметрыПолучения[1]);
	ИначеЕсли ТипДанных = Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ОписаниеWebСервиса Тогда
		Данные = ПолучитьWSDL(ПараметрыПолучения[0], ПараметрыПолучения[1], ПараметрыПолучения[2], ПараметрыПолучения[3], ПараметрыПолучения[4]);
	Иначе
		ШаблонТекста = НСтр("ru = 'Неизвестный тип данных кэша версий: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ТипДанных);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Формирует идентификатор записи кэша версий из адреса сервера и имени ресурса.
//
// Параметры:
//  Адрес - Строка - адрес сервера.
//  Имя   - Строка - имя ресурса.
//
// Возвращаемое значение:
//  Строка - идентификатор записи кэша версий.
//
Функция ИдентификаторЗаписиКэшаВерсий(Знач Адрес, Знач Имя) Экспорт
	
	Возврат Адрес + "|" + Имя;
	
КонецФункции

Функция ВнутренняяWSПрокси(Параметры) Экспорт
	
	Протокол = "";
	Позиция = СтрНайти(Параметры.АдресWSDL, "://");
	Если Позиция > 0 Тогда
		Протокол = НРег(Лев(Параметры.АдресWSDL, Позиция - 1));
	КонецЕсли;
		
	ЗащищенноеСоединение = Параметры.ЗащищенноеСоединение;
	ЭтоЗащищенноеСоединениеПоУмолчанию = Ложь;
	Если (Протокол = "https" Или Протокол = "ftps") И ЗащищенноеСоединение = Неопределено Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		ЭтоЗащищенноеСоединениеПоУмолчанию = Истина;
	КонецЕсли;
	
	WSОпределения = WSОпределения(Параметры.АдресWSDL, Параметры.ИмяПользователя, Параметры.Пароль,, 
		ЗащищенноеСоединение, ЭтоЗащищенноеСоединениеПоУмолчанию);
	
	ИмяТочкиПодключения = Параметры.ИмяТочкиПодключения;
	Если ПустаяСтрока(ИмяТочкиПодключения) Тогда
		ИмяТочкиПодключения = Параметры.ИмяСервиса + "Soap";
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Параметры.АдресWSDL);
	КонецЕсли;
	
	Местоположение = Параметры.Местоположение;
	Если ПустаяСтрока(Местоположение) Тогда
		Местоположение = Параметры.АдресWSDL;
		Позиция = СтрНайти(Местоположение, "?");
		Если Позиция > 0 Тогда
			Местоположение = Лев(Местоположение, Позиция - 1);
		КонецЕсли;
	КонецЕсли;
	
	Прокси = Новый WSПрокси(WSОпределения, Параметры.URIПространстваИмен, Параметры.ИмяСервиса, ИмяТочкиПодключения,
		ИнтернетПрокси, Параметры.Таймаут, ЗащищенноеСоединение, Местоположение, Параметры.ИспользоватьАутентификациюОС);
	Прокси.Пользователь = Параметры.ИмяПользователя;
	Прокси.Пароль       = Параметры.Пароль;
	
	Возврат Прокси;
КонецФункции

Функция КэшПрограммногоИнтерфейсаАктуален(ДатаОбновления)
	
	Если ЗначениеЗаполнено(ДатаОбновления) Тогда
		Возврат ДатаОбновления + 24 * 60 * 60 > ТекущаяУниверсальнаяДата(); // кешируем не более чем на 24 часа
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция WSОпределения(Знач АдресWSDL, Знач ИмяПользователя, Знач Пароль, Знач Таймаут = 10,
			Знач ЗащищенноеСоединение = Неопределено, ЭтоЗащищенноеСоединениеПоУмолчанию = Ложь)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Попытка
			ИнтернетПрокси = Неопределено; // По умолчанию.
			Определения = Новый WSОпределения(АдресWSDL, ИмяПользователя, Пароль, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить WS-определения по адресу 
				           |%1
				           |по причине:
				           |%2'"),
				АдресWSDL,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				РезультатДиагностики = МодульПолучениеФайловИзИнтернета.ДиагностикаСоединения(АдресWSDL);
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1
					           |Результат диагностики:
					           |%2'"),
					ТекстОшибки,
					РезультатДиагностики.ОписаниеОшибки);
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		Возврат Определения;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Массив;
	ПараметрыПолучения.Добавить(АдресWSDL);
	ПараметрыПолучения.Добавить(ИмяПользователя);
	ПараметрыПолучения.Добавить(Пароль);
	ПараметрыПолучения.Добавить(Таймаут);
	ПараметрыПолучения.Добавить(ЗащищенноеСоединение);

	ДанныеWSDL = ДанныеКэшаВерсий(
		АдресWSDL,
		Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ОписаниеWebСервиса, 
		ПараметрыПолучения,
		Ложь,
		ЭтоЗащищенноеСоединениеПоУмолчанию); // ДвоичныеДанные
		
	ИмяФайлаWSDL = ПолучитьИмяВременногоФайла("wsdl");
	ДанныеWSDL.Записать(ИмяФайлаWSDL);
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(АдресWSDL);
	КонецЕсли;
	
	Попытка
		Определения = Новый WSОпределения(ИмяФайлаWSDL, ИмяПользователя, Пароль, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить WS-определения из кэша 
			           |по причине:
			           |%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяФайлаWSDL);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение WSDL'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Определения;
КонецФункции

// Возвращаемое значение:
//  ФиксированныйМассив
//
Функция ПолучитьВерсииИнтерфейсаВКэш(Знач ПараметрыПодключения, Знач ИмяИнтерфейса)
	
	Если Не ПараметрыПодключения.Свойство("URL") 
		Или Не ЗначениеЗаполнено(ПараметрыПодключения.URL) Тогда
		
		ВызватьИсключение(НСтр("ru = 'Не задан URL сервиса.'"));
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("UserName")
		И ЗначениеЗаполнено(ПараметрыПодключения.UserName) Тогда
		
		ИмяПользователя = ПараметрыПодключения.UserName;
		
		Если ПараметрыПодключения.Свойство("Password") Тогда
			ПарольПользователя = ПараметрыПодключения.Password;
		Иначе
			ПарольПользователя = Неопределено;
		КонецЕсли;
		
	Иначе
		ИмяПользователя = Неопределено;
		ПарольПользователя = Неопределено;
	КонецЕсли;
	
	АдресСервиса = ПараметрыПодключения.URL + "/ws/InterfaceVersion?wsdl";
	
	ПроверятьДоставкуПакетовПриОшибке = ПараметрыПодключения.ПроверятьДоставкуПакетовПриОшибке;
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL = АдресСервиса;
	ПараметрыПодключения.URIПространстваИмен = "http://www.1c.ru/SaaS/1.0/WS";
	ПараметрыПодключения.ИмяСервиса = "InterfaceVersion";
	ПараметрыПодключения.ИмяПользователя = ИмяПользователя;
	ПараметрыПодключения.Пароль = ПарольПользователя;
	ПараметрыПодключения.Таймаут = 7;
	ПараметрыПодключения.ПроверятьДоставкуПакетовПриОшибке = ПроверятьДоставкуПакетовПриОшибке;
	
	ПроксиВерсионирования = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	МассивXDTO = ПроксиВерсионирования.GetVersions(ИмяИнтерфейса);
	Если МассивXDTO = Неопределено Тогда
		Возврат Новый ФиксированныйМассив(Новый Массив);
	Иначе	
		Сериализатор = Новый СериализаторXDTO(ПроксиВерсионирования.ФабрикаXDTO);
		Возврат Новый ФиксированныйМассив(Сериализатор.ПрочитатьXDTO(МассивXDTO));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьWSDL(Знач Адрес, Знач ИмяПользователя, Знач Пароль, Знач Таймаут, Знач ЗащищенноеСоединение = Неопределено)
	
	ПараметрыПолучения = Новый Структура;
	Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
		ПараметрыПолучения.Вставить("Пользователь", ИмяПользователя);
		ПараметрыПолучения.Вставить("Пароль", Пароль);
	КонецЕсли;
	ПараметрыПолучения.Вставить("Таймаут", Таймаут);
	ПараметрыПолучения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ОписаниеФайла = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	Иначе
		ВызватьИсключение(НСтр("ru = 'Подсистема ""Получение файлов из интернета"" не доступна.'"),
			КатегорияОшибки.ОшибкаКонфигурации);
	КонецЕсли;
	
	Если Не ОписаниеФайла.Статус Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл описания web-сервиса %1 по причине:
				|%2'"),
			Адрес, ОписаниеФайла.СообщениеОбОшибке), КатегорияОшибки.ОшибкаСети);
	КонецЕсли;
	
	ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Адрес);
	Попытка
		Определения = Новый WSОпределения(ОписаниеФайла.Путь, ИмяПользователя, Пароль, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Исключение
		РезультатДиагностики = МодульПолучениеФайловИзИнтернета.ДиагностикаСоединения(Адрес);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл описания web-сервиса %1 по причине:
				|%2
				|
				|Результат диагностики:
			    |%3'"),
			Адрес,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатДиагностики.ОписаниеОшибки);
			
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Трассировка:
			           |Защищенное соединение: %2
			           |Таймаут: %3'"),
			ТекстОшибки,
			Формат(ЗащищенноеСоединение, НСтр("ru = 'БЛ=Нет; БИ=Да'")),
			Формат(Таймаут, "ЧГ=0"));
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение WSDL'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
		ВызватьИсключение(ТекстОшибки, КатегорияОшибки.ОшибкаСети);
	КонецПопытки;
	
	Если Определения.Сервисы.Количество() = 0 Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл описания web-сервиса по причине:
			           |В полученном файле не содержится ни одного описания сервиса.
			           |Возможно, адрес файла описания указан неверно:
			           |%1'"),
			Адрес),
			КатегорияОшибки.ОшибкаСети);
	КонецЕсли;
	Определения = Неопределено;
	
	ДанныеФайла = Новый ДвоичныеДанные(ОписаниеФайла.Путь);
	
	Попытка
		УдалитьФайлы(ОписаниеФайла.Путь);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение WSDL'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#КонецЕсли